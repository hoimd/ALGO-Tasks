#include<iostream>
#define int uint64_t
using namespace std;

const int p[] = {0,0,1,2,2,2,3,4,5,5,5,6,7,7,7,8,8,8,9,10,10,
            10,11,12,13,13,13,14,15,15,15,16,17,18,18,18,19,20,20,20,21,
            21,21,22,23,23,23,24,25,26,26,26,27,28,28,28,28,28,29,30,31,
            31,31,32,33,33,33,34,35,36,36,36,37,38,38,38,39,39,39,40,41,
            41,41,42,43,44,44,44,45,46,46,46,47,48,48,48,49,50,50,50,50,
            50,50,50,50,50,50,51,52,53,53,53,54,55,55,55,56,57,58,58,58,
            59,60,60,60,61,61,61,62,63,63,63,64,65,66,66,66,67,68,68,68,
            68,68,68,69,69,69,69,69,69,69,69,69,69,69,69,70,71,71,71,72,
            73,73,73,73,73,73,73,73,73,73,74,75,76,76,76,77,78,78,78,79,
            80,81,81,81,82,83,83,83,84,84,84,85,86,86,86,87,88,89,89,89,
            90,91,91,91,91,91,91,91,92,92,92,92,93,93,93,93,93,94,94,94,
            94,94,94,94,95,95,95,95,95,95,95,95,95,95,95,95,96,97,97,97,
            98,99,99,99,99,99,99,99,99,99,99,100,101,102,102,102,103,104,104,104,
            105,106,107,107,107,108,109,109,109,110,110,110,111,112,112,112,113,114,115,115,
            115,116,117,117,117,117,117,117,118,118,118,118,119,119,119,119,119,119,119,119,
            119,119,119,119,119,119,119,119,120,120,120,120,121,121,121,121,121,122,122,122,
            122,122,122,122,123,123,123,123,123,123,123,123,123,123,123,123,124,125,125,125,
            126,127,127,127,127,127,127,127,127,127,127,128,129,130,130,130,131,132,132,132,
            133,134,135,135,135,136,137,137,137,138,138,138,139,140,140,140,141,142,143,143,
            143,144,145,145,145,145,145,145,145,145,145,145,145,146,146,146,146,147,147,147,
            147,147,147,147,147,147,147,147,147,148,148,148,148,149,149,149,149,149,149,149,
            149,149,149,149,149,149,149,149,149,150,150,150,150,151,151,151,151,151,152,152,
            152,152,152,152,152,153,153,153,153,153,153,153,153,153,153,153,153,154,155,155,
            155,156,157,157,157,157,157,157,157,157,157,157,158,159,160,160,160,161,162,162,
            162,163,164,165,165,165,166,167,167,167,168,168,168,169,170,170,170,171,172,173,
            173,173,174,175,175,175,175,175,175,175,175,175,175,175,175,175,175,175,175,175,
            175,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,177,177,177,
            177,178,178,178,178,178,178,178,178,178,178,178,178,179,179,179,179,180,180,180,
            180,180,180,180,180,180,180,180,180,180,180,180,180,181,181,181,181,182,182,182,
            182,182,183,183,183,183,183,183,183,184,184,184,184,184,184,184,184,184,184,184,
            184,185,186,186,186,187,188,188,188,188,188,188,188,188,188,188,189,190,191,191,
            191,192,193,193,193,194,195,196,196,196,197,198,198,198,199,199,199,200,201,201,
            201,202,203,204,204,204,205,206,206,206,206,206,206,206,206,206,206,206,206,206};

const int r[] = {1,1,0,0,2,2,0,0,0,3,3,0,0,3,3,0,4,4,0,0,4,4,
                 0,0,0,4,4,0,0,4,4,0,0,0,5,5,6,6,5,5,6,5,5,0,
                 0,5,5,0,0,6,5,5,6,6,5,5,6,6,7,7,0,6,6,7,8,6,
                 6,0,8,7,6,6,0,8,6,6,0,6,6,7,8,6,6,7,7,7,6,6,
                 7,7,6,6,0,8,7,7,0,9,7,7,7,7,7,7,7,7,7,9,0,8,
                 7,7,0,8,7,7,8,8,8,7,7,8,8,7,7,8,7,7,0,8,7,7,
                 9,8,8,7,7,9,8,7,7,8,8,8,9,8,8,8,8,8,8,8,8,8,
                 8,8,9,10,8,8,9,9,8,8,8,8,8,8,8,8,8,9,9,10,8,
                 8,9,10,8,8,9,9,9,8,8,9,9,8,8,10,8,8,9,10,8,8,
                 9,9,9,8,8,9,9,8,8,9,9,9,9,10,9,9,9,10,9,9,9,9,
                 10,9,9,9,9,9,9,10,9,9,9,9,9,9,9,9,9,9,9,10,10,
                 9,9,10,10,9,9,9,9,9,9,9,9,9,10,10,10,9,9,11,10,9,9,
                 10,10,10,9,9,10,10,9,9,10,9,9,11,10,9,9,11,10,10,9,
                 9,10,10,9,9,10,10,10,11,10,10,10,11,10,10,10,10,10,10,10,
                 10,10,10,10,10,10,10,10,11,10,10,10,11,10,10,10,10,11,10,10,
                 10,10,10,10,11,10,10,10,10,10,10,10,10,10,10,10,11,11,10,10,
                 11,11,10,10,10,10,10,10,10,10,10,11,11,11,10,10,11,11,10,10,
                 11,11,11,10,10,11,11,10,10,11,10,10,11,11,10,10,11,12,11,10,
                 10,11,11,10,10,11,11,11,11,11,11,11,11,12,11,11,11,12,11,11,
                 11,11,11,11,11,11,11,11,11,12,11,11,11,12,11,11,11,11,11,11,
                 11,11,11,11,11,11,11,11,11,12,11,11,11,12,11,11,11,11,12,11,
                 11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,12,12,11,
                 11,12,12,11,11,11,11,11,11,11,11,11,12,12,12,11,11,12,12,11,
                 11,12,12,12,11,11,12,12,11,11,12,11,11,12,12,11,11,12,12,12,
                 11,11,12,12,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,
                 12,13,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,13,12,12,
                 12,13,12,12,12,12,12,12,12,12,12,12,12,13,12,12,12,13,12,12,
                 12,12,12,12,12,12,12,12,12,12,12,12,12,13,12,12,12,13,12,12,
                 12,12,13,12,12,12,12,12,12,13,12,12,12,12,12,12,12,12,12,12,
                 12,13,13,12,12,13,13,12,12,12,12,12,12,12,12,12,13,13,13,12,
                 12,13,13,12,12,13,13,13,12,12,13,13,12,12,13,12,12,13,13,12,
                 12,13,13,13,12,12,13,13,12,12,13,13,13,13,13,13,13,13,13,13};

int x,E_x;

int E(int n){
    return ((n * (n + 1) * (2 * n + 1)) / 6);
}

int bsearch(int p, int k, int n){
    while(p < k) {
        int mid = (p + k) / 2;
        if (E(mid) == n) {
            return mid;
        }
        if (E(mid) <= n) {
            p = mid + 1;
        } else {
            k = mid;
        }
    }
    if(p == k){
        return p;
    }
}

int k(int n){
    x = bsearch(1, 1442251, n);
    E_x = E(x);

    if(E_x - n > 128){
        return x;
    }else{
        if(r[E_x - n]){
            return x;
        }else {
            return x + 1;
        }
    }
}

int overgrown_numbers(int n) {
    int o_n = 175 + (31 * (x - 11)), k_i, p;
    int m = k(E_x);

    if(n > E_x - 130) {
        p = n;
    }else{
        p = E_x - 130;
    }

    for(int i = E_x - 1;i > p;i--){
        int k_i = k(i);

        if(k_i > m){
            o_n--;
        }else
            m = k_i;
    }
    return o_n;
}

int32_t main(){
    ios_base::sync_with_stdio(false);
    int n;

    cin >> n;

    if(n < 651){
        if(r[n]){
            cout << r[n] << ' ';
        }else{
            cout << '-' << ' ';
        }
        cout << p[n];
    }else{
        cout << k(n) << ' ' << overgrown_numbers(n);
    }

    return 0;
}




